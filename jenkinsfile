pipeline {
    agent any
    tools {
        nodejs 'node.js'
    }
    environment {
        IMAGE_NAME = 'kamalesh25/yapster'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    stages {
        stage('Git Repo Fetch') {
            steps {
                git branch: 'main', credentialsId: 'git-credentials', url: 'https://github.com/25kamalesh/YapOps.git'
            }
        }
        stage('Install Frontend Dependencies') {
            steps {
                dir('Frontend') {
                    script {
                        if (!fileExists('node_modules')) {
                            sh 'npm ci'
                        } else {
                            echo 'Dependencies already installed, skipping...'
                        }
                    }
                }
            }
        }
        stage('Run Frontend Tests') {
            steps {
                dir('Frontend') {
                    sh 'npm run test:run'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('Frontend') {
                    script {
                        def scannerHome = tool 'SonarQubeScanner'
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=yapster-frontend \
                                -Dsonar.projectName='Yapster Frontend' \
                                -Dsonar.projectVersion=${BUILD_NUMBER} \
                                -Dsonar.sources=src \
                                -Dsonar.tests=src/test \
                                -Dsonar.exclusions=src/test/**/* \
                                -Dsonar.sourceEncoding=UTF-8 \
                                -Dsonar.scm.disabled=true
                            """
                        }
                    }
                }
            }
        }
        stage('SonarQube Quality Gate') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        try {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            } else {
                                echo "‚úÖ Quality Gate passed successfully!"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Quality Gate check failed or timed out: ${e.getMessage()}"
                            echo "üîç Checking SonarQube project status manually..."
                            
                            // You can add manual verification here if needed
                            // For now, we'll mark as unstable rather than failing
                            currentBuild.result = 'UNSTABLE'
                            echo "‚ö†Ô∏è Build marked as UNSTABLE due to Quality Gate timeout"
                        }
                    }
                }
            }
        }
        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh '''
                        echo "üîç Scanning filesystem for vulnerabilities..."
                        trivy fs . \
                        --format table \
                        --exit-code 0 \
                        --severity LOW,MEDIUM,HIGH,CRITICAL \
                        --no-progress
                        
                        echo "üîç Scanning for HIGH and CRITICAL vulnerabilities only..."
                        trivy fs . \
                        --format json \
                        --output trivy-fs-report.json \
                        --exit-code 1 \
                        --severity HIGH,CRITICAL \
                        --no-progress
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-fs-report.json', allowEmptyArchive: true
                }
            }
        }
        stage('Docker Build, Tag & Scan') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                    """
                    
                    echo "üîç Scanning Docker image with Trivy..."
                    sh """
                        trivy image ${IMAGE_NAME}:${IMAGE_TAG} \
                        --format table \
                        --exit-code 0 \
                        --severity LOW,MEDIUM,HIGH,CRITICAL \
                        --no-progress
                        
                        trivy image ${IMAGE_NAME}:${IMAGE_TAG} \
                        --format json \
                        --output trivy-image-report.json \
                        --exit-code 1 \
                        --severity CRITICAL \
                        --no-progress
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-image-report.json', allowEmptyArchive: true
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker push ${IMAGE_NAME}:latest"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def buildStatus = currentBuild.result ?: 'SUCCESS'
                def buildNumber = env.BUILD_NUMBER
                def jobName = env.JOB_NAME
                def buildUrl = env.BUILD_URL
                
                // Determine email subject and body based on build status
                def emailSubject = ''
                def emailBody = ''
                def statusEmoji = ''
                
                if (buildStatus == 'SUCCESS') {
                    statusEmoji = '‚úÖ'
                    emailSubject = "${statusEmoji} Jenkins Build #${buildNumber} - SUCCESS"
                    emailBody = """
                        <h2>${statusEmoji} Build Successful!</h2>
                        <p><strong>Job:</strong> ${jobName}</p>
                        <p><strong>Build Number:</strong> #${buildNumber}</p>
                        <p><strong>Status:</strong> <span style="color: green;">SUCCESS</span></p>
                        <p><strong>Build URL:</strong> <a href="${buildUrl}">${buildUrl}</a></p>
                        
                        <h3>üöÄ Successfully Completed:</h3>
                        <ul>
                            <li>‚úÖ Frontend tests passed</li>
                            <li>‚úÖ SonarQube analysis completed</li>
                            <li>‚úÖ Quality Gate passed</li>
                            <li>‚úÖ Trivy security scans completed</li>
                            <li>‚úÖ Docker image built and tagged</li>
                            <li>‚úÖ Image pushed to Docker Hub</li>
                        </ul>
                        
                        <h3>üìä Docker Images Published:</h3>
                        <ul>
                            <li>kamalesh25/yapster:${buildNumber}</li>
                            <li>kamalesh25/yapster:latest</li>
                        </ul>
                        
                        <p><strong>Trivy Security Report:</strong> See attached trivy-image-report.json</p>
                        
                        <hr>
                        <p><em>This is an automated message from Jenkins CI/CD Pipeline</em></p>
                    """
                } else {
                    statusEmoji = '‚ùå'
                    emailSubject = "${statusEmoji} Jenkins Build #${buildNumber} - FAILED"
                    emailBody = """
                        <h2>${statusEmoji} Build Failed!</h2>
                        <p><strong>Job:</strong> ${jobName}</p>
                        <p><strong>Build Number:</strong> #${buildNumber}</p>
                        <p><strong>Status:</strong> <span style="color: red;">FAILED</span></p>
                        <p><strong>Build URL:</strong> <a href="${buildUrl}">${buildUrl}</a></p>
                        
                        <h3>üîç Possible Failure Reasons:</h3>
                        <ul>
                            <li>‚ùå Frontend tests failed</li>
                            <li>‚ùå SonarQube analysis failed</li>
                            <li>‚ùå Quality Gate failed</li>
                            <li>‚ùå Trivy found critical vulnerabilities</li>
                            <li>‚ùå Docker build failed</li>
                            <li>‚ùå Docker push failed</li>
                        </ul>
                        
                        <p><strong>Action Required:</strong> Check the build logs and fix the issues before the next deployment.</p>
                        
                        <p><strong>Trivy Security Report:</strong> See attached trivy-image-report.json (if available)</p>
                        
                        <hr>
                        <p><em>This is an automated message from Jenkins CI/CD Pipeline</em></p>
                    """
                }
                
                // Send email with attachment
                emailext (
                    subject: emailSubject,
                    body: emailBody,
                    mimeType: 'text/html',
                    to: 'kamaleshb.2004@gmail.com',
                    attachmentsPattern: 'trivy-image-report.json',
                    attachLog: true
                )
            }
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
            echo "üìß Success notification sent to kamaleshb.2004@gmail.com"
        }
        failure {
            echo "‚ùå Pipeline failed!"
            echo "üìß Failure notification sent to kamaleshb.2004@gmail.com"
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline is unstable!"
            echo "üìß Unstable notification sent to kamaleshb.2004@gmail.com"
        }
    }
}